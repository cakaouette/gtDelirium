{% extends "layout.twig" %}

{% macro day_cell(member, day, team) %}
  {% if member.days[day] is defined and member.days[day][team] is defined %}
    {% set info = member.days[day][team] %}
    <td style="background: grey">
      <div style="text-align: center">
        <img src="/dist/image/bosses/{{ info.boss }}.png" width="30" />
        <span>{{ info.damage }}</span>
        <div>
          {% for id in info.team %}
          <img src="/dist/image/heros/{{ id }}_icon.png"  width="30" />
          {% endfor %}
        </div>
      </div>
    </td>
  {% else %}
    <td style="text-align: center;vertical-align: middle;"><button class="btn btn-primary" onclick="alert('pas encore possible')">Ajouter</button></td>
  {% endif %}
{% endmacro %}

{% block title %}Raid{% endblock %}

{% block content %}
<div class="row justify-content-between">
  <div class="col-md-7">
    <div class="form-group row align-items-center">
      <label for="dateFormId" class="col-sm-3 col-form-label">Degats totaux réels: </label>
      <div class="col-sm-3">
        <input type="input" id="real-total"/>
      </div>
      <div class="col-sm-2">
        <button type="submit" class="btn btn-primary" id="validate-total-score">Valider</button>
      </div>
    </div>
  </div>
  <div class="col-md-12 row justify-content-center">
    <h3>Objectif: <span id="objectif">inconnu</span></h3>
  </div>
</div>

<div class="row">
  <div class="card col-lg-6">
    <div class="card-header">
      <h3 class="card-title">Degats par joueur</h3>
    </div>
    <div class="card-body">
      <table class="table table-bordered table-hover">
        <thead>
          <tr>
            <th>Nom</th>
            <th>Combats totaux</th>
            <th>Degats</th>
            <th>Valide</th>
            <th>Editer</th>
          </tr>
        </thead>
        <tbody>
        {% for memberId, member in fights %}
          <tr id="member-row-{{ memberId }}">
            <td>{{ member.name }}</td>
            <td>{{ member.count }}/42</td>
            <td>{{ member.damage }}</td>
            <td><input type="checkbox" value="{{ memberId }}" class="validate-member-total-score" /></td>
            <td><button class="btn btn-primary edit-member-score" data-id="{{ memberId }}">Editer</button></td>
          </tr>
        {% endfor %}
        </tbody>
      </table>
    </div>
  </div>
  {% for memberId, member in fights %}
  <div class="card col-lg-6 member-details" id="member-details-{{ memberId }}" style="display:none">
    <div class="card-header">
      <h3 class="card-title">Degats de {{ member.name }}</h3>
    </div>
    <div class="card-body">
      <div class="form-group row align-items-center">
        <label for="dateFormId" class="col-sm-3 col-form-label">Degats totaux réels: </label>
        <div class="col-sm-4">
          <input type="input" class="member-damage" id="member-damage-{{ memberId }}"/>
        </div>
        <div class="col-sm-2">
          <button type="button" class="btn btn-primary validate-member-score" data-id="{{ memberId }}" data-toggle="modal" data-target="#suggestions-modal">Valider</button>
        </div>
        <div class="col-sm-2">
          <span id="member-details-{{ memberId }}-diff-score"></span>
        </div>
      </div>
      <table class="table table-bordered table-hover">
        <thead>
          <tr>
            <th>Jour</th>
            <th>Team 1</th>
            <th>Team 2</th>
            <th>Team 3</th>
            <th>Editer</th>
          </tr>
        </thead>
        <tbody>
        {% for day, index in days %}
          <tr id="member-day-{{ day }}">
            <td>{{ index + 1 }}</td>
            {{ _self.day_cell(member, day, 0) }}
            {{ _self.day_cell(member, day, 1) }}
            {{ _self.day_cell(member, day, 2) }}
            <td><button class="btn btn-primary edit-day-score" data-id="{{ memberId }}" data-day="{{ day }}" onclick="alert('pas encore possible')">Editer</button></td>
          </tr>
        {% endfor %}
        </tbody>
      </table>
    </div>
  </div>
  {% endfor %}
</div>
{% endblock %}

{% block modal %}
<div class="modal fade" id="suggestions-modal">
  <div class="modal-dialog modal-xl">
    <div class="modal-content bg-default">
      <div class="modal-header p-0 pt-1 bg-{{ guild.color }}">
          <ul class="modal-title nav nav-tabs" id="suggestion-tabs-tab" role="tablist">
            <!--suggestions tabs-->
          </ul>
        <button type="button" class="close mr-0" data-dismiss="modal" aria-label="Close">
          <span aria-hidden="true">&times;</span>
        </button>
      </div>
      <div class="modal-body">
        <div class="row">
          <div class="tab-content" id="suggestion-tabs-tabContent">
            <!--suggestions content-->
          </div>
        </div>
      </div>
      <div class="modal-footer justify-content-between bg-default">
        <button type="button" class="btn btn-primary" data-dismiss="modal">Close</button>
        <form class="form" role="form" method="post" id="suggestion-form">
          {% include 'csrf.twig' %}
          <input type="hidden" id="suggestion-member" name="member" value=""/>
          <input type="hidden" id="suggestion-choice" name="suggestion" value=""/>
          <button type="submit" class="btn btn-primary" id="submit-suggestion" name="updateForm">Choisir cette suggestion</button>
        </form>
      </div>
    </div>
    <!-- /.modal-content -->
  </div>
  <!-- /.modal-dialog -->
</div>
{% endblock %}

{% block scripts %}
<script type="text/javascript">
$(document).ready(function(){
  let total = {{ total }}
  let suggestions = []
  const fights = {{ fights | json_encode | raw }}
  const days = {{ days | json_encode | raw }}
  const updateObjectif = () => {
    const diff = $('#real-total').val() - total
    if (diff == 0) $('#objectif').text("Accompli. Vous pouvez enregitrer maintenant").css('color', 'green')
    else if (diff > 0) $('#objectif').text('Ajouter ' + diff).css('color', 'tomato')
    else if (diff < 0) $('#objectif').text('Retirer ' + (diff * -1)).css('color', 'brown')
  }
  const updateMemberDiff = (id) => {
    const diff = $('#member-damage-' + id).val() - fights[id].damage
    const target = $('#member-details-' + id + '-diff-score')
    if (diff == 0) target.text("OK").css('color', 'green')
    else if (diff > 0) target.text('+' + diff).css('color', 'tomato')
    else if (diff < 0) target.text(diff).css('color', 'brown')
    fights[id].diff = diff
  }
  const suggestScores = (id) => {
    const member = fights[id]
    const missingBattles = member.diff > 0 ? fundMissingBattlesChoices(member) : []
    suggestions = []
    if (missingBattles.length === 0) {
      alert('Pas de suggestion trouvée. Veuillez les renseigner manuellement.')
    }
    else {
      suggestions = cartesian(...missingBattles.map(b => b.battlesCombinations.map(c => ({ battles: c, day: b.day, index: b.index, slots: b.slots }))))
      for (const suggestion of suggestions) {
        const total = suggestion.reduce((total, s) => total + s.battles.reduce((damage, b) => damage + b.damage, 0), 0)
        for (const day of suggestion) {
          for (const battle of day.battles) {
            battle.weightedDamage = Math.round(battle.damage * member.diff / total)
          }
        }
      }
      const tabs = []
      const contents = []
      for (let i = 0; i < suggestions.length; i++) {
        const suggestion = suggestions[i]
        tabs.push('<li class="nav-item">' +
              `<a class="nav-link${i === 0 ? ' active' : ''}" id="suggestion-tabs-${i}-tab" data-toggle="pill" href="#suggestion-tabs-${i}" role="tab" aria-controls="suggestion-tabs-${i}" aria-selected="true">Suggestion ${i + 1}</a>` +
            '</li>')
        const content = [`<div class="tab-pane suggestion-tab fade${i === 0 ? ' show active' : ''}" id="suggestion-tabs-${i}" data-suggestion="${i}" data-member="${id}" role="tabpanel" aria-labelledby="suggestion-tabs-${i}-tab">`,
          `<dl class="row">`]
        for (let j = 0; j < suggestion.length; j++) {
          const day = suggestion[j]
          content.push(`<dt class="col-sm-4">Day ${day.index + 1} - ${day.day}</dt>`)
          for (let k = 0; k < day.battles.length; k++) {
            const battle = day.battles[k]
            content.push(`<dd class="col-sm-8${k !== 0 ? ' offset-sm-4' : ''}">` +
              '<div style="text-align: center" class="d-flex justify-content-around">' +
                '<div>' +
                  battle.team.map(t => `<img src="/dist/image/heros/${t}_icon.png"  width="30" />`).join('') +
                  ` vs <img src="/dist/image/bosses/${battle.boss}.png" width="30" />` +
                '</div>' +
                `<div>suggestion: ${battle.weightedDamage}</div>` +
                `<div>moyenne: ${battle.damage}</div>` +
              '</div>' +
            '</dd>')
          }
        }
        content.push('</dl></div>')
        contents.push(content.join(''))
      }
      $('#suggestions-modal #suggestion-tabs-tab').html(tabs.join(''))
      $('#suggestions-modal #suggestion-tabs-tabContent').html(contents.join(''))
    }
  }
  const fundMissingBattlesChoices = (member) => {
    const missingBattles = []
    for (const [day, index] of Object.entries(days)) {
      const battlesForDay = []
      const slots = []
      for (let team = 0; team < 3; team++) {
        if (!member.days[day]?.[team]) {
          slots.push(team)
          battlesForDay.push(findPossibleTeams(member, day))
        }
      }
      if (battlesForDay.length) {
        const battlesCombinations = cartesian(...battlesForDay).reduce((final, combination) => {
          const heroes = combination.flatMap(c => c.team)
          if (heroes.length == new Set(heroes).size) {
            if (!final.some(f => f.every(c => combination.map(m => m.team).includes(c.team)))) {
              final.push(combination)
            }
          }
          return final
        }, [])
        missingBattles.push({ day, index, slots, battlesCombinations })
      }
    }

    return missingBattles
  }
  const cartesian = (...args) => {
    var r = [], max = args.length-1;
    function helper(arr, i) {
        for (var j=0, l=args[i].length; j<l; j++) {
            var a = arr.slice(0); // clone arr
            a.push(args[i][j]);
            if (i==max)
                r.push(a);
            else
                helper(a, i+1);
        }
    }
    helper([], 0);
    return r;
  }
  const findPossibleTeams = (member, day) => {
    if (!member.days[day]) return [...member.teams]
    const usedHeros = member.days[day].reduce((team, battle) => team.concat(battle.team), [])
    return member.teams.filter(x => !x.team.some(t => usedHeros.includes(t)))
  }
  $('#validate-total-score').click(updateObjectif)
  $('.validate-member-total-score').change((e) => {
    const self = $(e.currentTarget)
    const checked = self.prop('checked');
    const row = $('#member-row-' + self.val())
    if (checked) {
      row.css('background-color', 'green')
      $('.edit-member-score', row).attr('disabled', true)
      $('#member-details-' + self.val()).hide()
    }
    else {
      row.css('background-color', '')
      $('.edit-member-score', row).attr('disabled', false)
    }
  })
  $('.edit-member-score').click((e) => {
    const self = $(e.currentTarget)
    $('.member-details').hide()
    $('#member-details-' + self.data('id')).show()
  })
  $('body').on('click', '.validate-member-score', (e) => {
    const id = $(e.currentTarget).data('id')
    updateMemberDiff(id)
    suggestScores(id)
  })
  $('#suggestion-form').submit(() => {
    const choice = $('.suggestion-tab.active');
    $('#suggestion-choice').val(JSON.stringify(suggestions[choice.data('suggestion')]))
    $('#suggestion-member').val(choice.data('member'))
    return true
  })
});
</script>
{% endblock %}
