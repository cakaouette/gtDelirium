{% extends "layout.twig" %}

{% macro day_cell(member, day, team) %}
  {% if member.days[day] is defined and member.days[day][team] is defined %}
    {% set info = member.days[day][team] %}
    <td style="background: grey">
      <div style="text-align: center">
        <img src="/dist/image/bosses/{{ info.boss }}.png" width="30" />
        <span>{{ info.damage }}</span>
        <div>
          {% for id in info.team %}
          <img src="/dist/image/heros/{{ id }}_icon.png"  width="30" />
          {% endfor %}
        </div>
      </div>
    </td>
  {% else %}
    <td style="text-align: center;vertical-align: middle;"><button class="btn btn-primary">Ajouter</button></td>
  {% endif %}
{% endmacro %}

{% block title %}Raid{% endblock %}

{% block content %}
<div class="row justify-content-between">
  <div class="col-md-7">
    <div class="form-group row align-items-center">
      <label for="dateFormId" class="col-sm-3 col-form-label">Degats totaux réels: </label>
      <div class="col-sm-3">
        <input type="input" id="real-total"/>
      </div>
      <div class="col-sm-2">
        <button type="submit" class="btn btn-primary" id="validate-total-score">Valider</button>
      </div>
    </div>
  </div>
  <div class="col-md-12 row justify-content-center">
    <h3>Objectif: <span id="objectif">inconnu</span></h3>
  </div>
</div>

<div class="row">
  <div class="card col-lg-6">
    <div class="card-header">
      <h3 class="card-title">Degats par joueur</h3>
    </div>
    <div class="card-body">
      <table class="table table-bordered table-hover">
        <thead>
          <tr>
            <th>Nom</th>
            <th>Combats totaux</th>
            <th>Degats</th>
            <th>Valide</th>
            <th>Editer</th>
          </tr>
        </thead>
        <tbody>
        {% for memberId, member in fights %}
          <tr id="member-row-{{ memberId }}">
            <td>{{ member.name }}</td>
            <td>{{ member.count }}/42</td>
            <td>{{ member.damage }}</td>
            <td><input type="checkbox" value="{{ memberId }}" class="validate-member-total-score" /></td>
            <td><button class="btn btn-primary edit-member-score" data-id="{{ memberId }}">Editer</button></td>
          </tr>
        {% endfor %}
        </tbody>
      </table>
    </div>
  </div>
  {% for memberId, member in fights %}
  <div class="card col-lg-6 member-details" id="member-details-{{ memberId }}" style="display:none">
    <div class="card-header">
      <h3 class="card-title">Degats de {{ member.name }}</h3>
    </div>
    <div class="card-body">
      <div class="form-group row align-items-center">
        <label for="dateFormId" class="col-sm-3 col-form-label">Degats totaux réels: </label>
        <div class="col-sm-4">
          <input type="input" class="member-damage" id="member-damage-{{ memberId }}"/>
        </div>
        <div class="col-sm-2">
          <button type="submit" class="btn btn-primary validate-member-score" data-id="{{ memberId }}">Valider</button>
        </div>
        <div class="col-sm-2">
          <span id="member-details-{{ memberId }}-diff-score"></span>
        </div>
      </div>
      <table class="table table-bordered table-hover">
        <thead>
          <tr>
            <th>Jour</th>
            <th>Team 1</th>
            <th>Team 2</th>
            <th>Team 3</th>
            <th>Editer</th>
          </tr>
        </thead>
        <tbody>
        {% for day, index in days %}
          <tr id="member-day-{{ day }}">
            <td>{{ index + 1 }}</td>
            {{ _self.day_cell(member, day, 0) }}
            {{ _self.day_cell(member, day, 1) }}
            {{ _self.day_cell(member, day, 2) }}
            <td><button class="btn btn-primary edit-day-score" data-id="{{ memberId }}" data-day="{{ day }}">Editer</button></td>
          </tr>
        {% endfor %}
        </tbody>
      </table>
    </div>
  </div>
  {% endfor %}
</div>
{% endblock %}

{% block modal %}
{% if false %}
<div class="modal fade" id="modalAll">
  <div class="modal-dialog modal-xl">
    <div class="modal-content bg-default">
      <div class="modal-header bg-{{ guild.color }}">
        <h4 class="modal-title">memberName:</h4>
        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
          <span aria-hidden="true">&times;</span>
        </button>
      </div>
      <form class="form" role="form" method="post">
        {% include 'csrf.twig' %}
        <div class="modal-body">
          <input type="hidden" id="recorderIdFormId" name="recorderIdForm" value="{{ user.id }}"/>
          <input type="hidden" id="idFormId" name="idForm" value=""/>
          <input type="hidden" id="guildFormId" name="guildForm" value=""/>
          <input type="hidden" id="memberFormId" name="memberForm" value=""/>
          <input type="hidden" id="raidIdFormId" name="raidIdForm" value=""/>
          <input type="hidden" id="dateFormId" name="dateForm" value=""/>
          <input type="hidden" id="teamFormId" name="teamForm" value=""/>
          <input type="hidden" id="teamNbUsedFormId" name="teamNbUsedForm" value=""/>
          <div class="form-group row">
            <label for="bossFormId" class="col-sm-1 col-form-label">Boss: </label>
            <div class="col-sm-3">
              <select name="bossForm"
                      id="bossFormId"
                      class="custom-select form-control">
                <option value="0"></option>
                {% for id, name in raid.bosses %}
                <option value="{{ id }}">{{ name }}</option>
                {% endfor %}
              </select>
            </div>
            <div class="col-sm-2">
              <input type="number"
                     class="form-control" 
                     id="damageFormId"
                     name="damageForm"
                     placeholder="Dégâts">
            </div>
            <button type="submit" class="btn btn-primary col-sm-2 buttonSubmit"></button>
          </div>
          <div class="form-group row align-items-center">
            <label for="hero1FormId" class="col-sm-1 col-form-label">Team: </label>
            <div class="col-sm-2">
                {{ _self.print_select_hero(1, characters) }}
            </div>
            <div class="col-sm-2">
                {{ _self.print_select_hero(2, characters) }}
            </div>
            <div class="col-sm-2">
                {{ _self.print_select_hero(3, characters) }}
            </div>
            <div class="col-sm-2">
                {{ _self.print_select_hero(4, characters) }}
            </div>
            <div class="col-sm-2">
              <div class="custom-control custom-switch" added="false">
                <!-- input checkbox -->
              </div>
            </div>
            <div class="col-sm-1">
              <button type="button"
                      class="btn btn-outline-secondary clean-team">
                <i class="right fas fa-brush"></i>
              </button>
            </div>
          </div>
          <div class="row">
          {% for i in 0..1 %}
            <div class="col-sm-6">
            {% for j in 1..3 %}
                {% set index = j + (i * 3) %}
                <div class="form-group row align-items-center">
                    <div class="col-sm-1">
                        <i class="far fa-dot-circle "></i>
                    </div>
                    <div class="col-sm-11 select-team" id="select-team{{ index }}">
                    {% for k in 1..4 %}
                        <img src="/dist/image/heros/0_icon.png" hero="{{ k }}"
                            class="img-fluid img-thumbnail hero team{{ index }}"
                            width="100" height="100" alt="0">
                    {% endfor %}
                    </div>
                </div>
            {% endfor %}
            </div>
          {% endfor %}
          </div>
        </div>
        <div class="modal-footer justify-content-between bg-default">
          <button type="button" class="btn btn-primary" data-dismiss="modal">Close</button>
          <button type="submit"
                  class="btn btn-primary buttonSubmit"
                  name="updateForm"></button>
          <button type="submit" class="btn btn-outline-danger float-right" name="teamDeleteForm" >Supprimer</button>
        </div>
      </form>
    </div>
    <!-- /.modal-content -->
  </div>
  <!-- /.modal-dialog -->
</div>
{% endif %}
{% endblock %}

{% block scripts %}
<script type="text/javascript">
$(document).ready(function(){
  let total = {{ total }}
  const fights = {{ fights | json_encode | raw }}
  const days = {{ days | json_encode | raw }}
  const updateObjectif = () => {
    const diff = $('#real-total').val() - total
    if (diff == 0) $('#objectif').text("Accompli. Vous pouvez enregitrer maintenant").css('color', 'green')
    else if (diff > 0) $('#objectif').text('Ajouter ' + diff).css('color', 'tomato')
    else if (diff < 0) $('#objectif').text('Retirer ' + (diff * -1)).css('color', 'brown')
  }
  const updateMemberDiff = (id) => {
    const diff = $('#member-damage-' + id).val() - fights[id].damage
    const target = $('#member-details-' + id + '-diff-score')
    if (diff == 0) target.text("OK").css('color', 'green')
    else if (diff > 0) target.text('+' + diff).css('color', 'tomato')
    else if (diff < 0) target.text(diff).css('color', 'brown')
    fights[id].diff = diff
  }
  const suggestScores = (id) => {
    const member = fights[id]
    const missingBattles = member.diff > 0 ? fundMissingBattlesChoices(member) : []
    if (missingBattles.length === 0) {
      alert('Pas de suggestion trouvée. Veuillez les renseigner manuellement.')
    }
    else {
      const suggestions = cartesian(...missingBattles.map(b => b.battlesCombinations.map(c => ({ battles: c, day: b.day, index: b.index, slots: b.slots }))))
      for (const suggestion of suggestions) {
        const total = suggestion.reduce((total, s) => total + s.battles.reduce((damage, b) => damage + b.damage, 0), 0)
        for (const day of suggestion) {
          for (const battle of day.battles) {
            battle.weightedDamage = Math.round(battle.damage * member.diff / total)
          }
        }
      }
      //TODO open popup with list of missing battles and suggestions instead of this console.log
      for (let i = 0; i < suggestions.length; i++) {
        console.log(`Suggestion ${i + 1}: `)
        for (let j = 0; j < suggestions[i].length; j++) {
          const day = suggestions[i][j]
          console.log(`- day ${day.index} (${day.day}):`)
          for (let k = 0; k < day.battles.length; k++) {
            const battle = day.battles[k]
            console.log(`  - battle ${day.slots[k] + 1}: boss ${battle.boss} -  team ${battle.team} - suggested damage: ${battle.weightedDamage} - average damage: ${battle.damage}`)
          }
        }
      }
    }
  }
  const fundMissingBattlesChoices = (member) => {
    const missingBattles = []
    for (const [day, index] of Object.entries(days)) {
      const battlesForDay = []
      const slots = []
      for (let team = 0; team < 3; team++) {
        if (!member.days[day]?.[team]) {
          slots.push(team)
          battlesForDay.push(findPossibleTeams(member, day))
        }
      }
      if (battlesForDay.length) {
        const battlesCombinations = cartesian(...battlesForDay).reduce((final, combination) => {
          const heroes = combination.flatMap(c => c.team)
          if (heroes.length == new Set(heroes).size) {
            if (!final.some(f => f.every(c => combination.map(m => m.team).includes(c.team)))) {
              final.push(combination)
            }
          }
          return final
        }, [])
        missingBattles.push({ day, index, slots, battlesCombinations })
      }
    }

    return missingBattles
  }
  const cartesian = (...args) => {
    var r = [], max = args.length-1;
    function helper(arr, i) {
        for (var j=0, l=args[i].length; j<l; j++) {
            var a = arr.slice(0); // clone arr
            a.push(args[i][j]);
            if (i==max)
                r.push(a);
            else
                helper(a, i+1);
        }
    }
    helper([], 0);
    return r;
  }
  const findPossibleTeams = (member, day) => {
    if (!member.days[day]) return [...member.teams]
    const usedHeros = member.days[day].reduce((team, battle) => team.concat(battle.team), [])
    return member.teams.filter(x => !x.team.some(t => usedHeros.includes(t)))
  }
  $('#validate-total-score').click(updateObjectif)
  $('.validate-member-total-score').change((e) => {
    const self = $(e.currentTarget)
    const checked = self.prop('checked');
    const row = $('#member-row-' + self.val())
    if (checked) {
      row.css('background-color', 'green')
      $('.edit-member-score', row).attr('disabled', true)
      $('#member-details-' + self.val()).hide()
    }
    else {
      row.css('background-color', '')
      $('.edit-member-score', row).attr('disabled', false)
    }
  })
  $('.edit-member-score').click((e) => {
    const self = $(e.currentTarget)
    $('.member-details').hide()
    $('#member-details-' + self.data('id')).show()
  })
  $('body').on('click', '.validate-member-score', (e) => {
    const id = $(e.currentTarget).data('id')
    updateMemberDiff(id)
    suggestScores(id)
  })
});
</script>
{% if false %}
<script type="text/javascript">
$(function () {
    $('#modalAll').on('show.bs.modal', function (event) {
      var button = $(event.relatedTarget); // Button that triggered the modal
      var modal = $(this);
      var memberName = button.data('member_name'); // Extract info from data-* attributes
      var teamNumber = button.data('team_number');
      modal.find('.modal-title').text(memberName + ' - Attaque ' + teamNumber);
      
      modal.find('#idFormId').val(button.data('id'));
      modal.find('#guildFormId').val(button.data('guild_id'));
      modal.find('#memberFormId').val(button.data('member_id'));
      modal.find('#raidIdFormId').val(button.data('raid_id'));
      modal.find('#dateFormId').val(button.data('date'));
      modal.find('#teamFormId').val(teamNumber);
      modal.find('#bossFormId').val(button.data('boss_id'));
      modal.find('#damageFormId').val(button.data('damage'));
      // 
      var valueHero1 = '#hero1FormId option[value="' + button.data('team_hero1') + '"]';
      $(valueHero1).prop('selected', true);
      var valueHero2 = '#hero2FormId option[value="' + button.data('team_hero2') + '"]';
      $(valueHero2).prop('selected', true);
      var valueHero3 = '#hero3FormId option[value="' + button.data('team_hero3') + '"]';
      $(valueHero3).prop('selected', true);
      var valueHero4 = '#hero4FormId option[value="' + button.data('team_hero4') + '"]';
      $(valueHero4).prop('selected', true);
      if (button.data('is_edit')) {
        modal.find('.buttonSubmit').attr("name" , 'teamUpdateForm');
        modal.find('.buttonSubmit').text('Modifier');
      } else {
        modal.find('.buttonSubmit').attr("name" , 'teamAddForm');
        modal.find('.buttonSubmit').text('Sauvegarder');
      }
      
      // set team saved
      var teamSaved = button.parent().parent().children("div").first().children("div");
      var teamSavedInfo = teamSaved.attr('team_nb');
      if (teamSavedInfo !== "") {
        $.each(teamSavedInfo.split('-'), function(index, value) {
          var teamInfo = teamSaved.attr('team_'+value).split(':');
          var heroId = teamInfo['2'].split('-');
          $('.hero.team'+value).each(function(index) {
            $( this ).attr("alt", heroId[index]);
            $( this ).attr("src", '/dist/image/heros/'+heroId[index]+'_icon.png');
          });
        });
      }
    });
    
    $('.select-team').click(function () {
      var teamNb = $(this).get(0).id.split("team")[1];
      var savedHeros = $(this).find('.hero');
      var switchButton = $('.custom-control.custom-switch');
      if (switchButton.attr('added') == 'false') {
        var input = '<input type="checkbox"'
                    +'class="custom-control-input"'
                    +'name="saveTeamForm"'
                    +'id="saveTeamFormId">';
        var label = '<label class="custom-control-label" for="saveTeamFormId">Save team ?</label>';
        switchButton.append(input);
        switchButton.append(label);
        switchButton.attr('added', 'true');
      }
      
      $('#teamNbUsedFormId').val(teamNb);
      savedHeros.each(function( index ) {
        var valueHero = '#hero'+(index+1)+'FormId option[value="' + $( this ).attr("alt") + '"]';
        $(valueHero).prop('selected', true);
      });
    });
    
    $('.clean-team').click(function () {
      var switchButton = $('.custom-control.custom-switch');
      switchButton.attr('added', false);
      switchButton.empty();
      
      $.each( [1,2,3,4], function( i, v ){
        var valueHero = '#hero'+v+'FormId option[value="0"]';
        $(valueHero).prop('selected', true);
      });
    });
});
</script>
{% endif %}
{% endblock %}
