{% extends "layout.twig" %}

{% macro active_tab(tab, current) %}
{{ current == tab ? 'active' : ''}}
{% endmacro %}

{% block title %}Profile {{ member.name }}{% endblock %}

{% block content %}
<div class="row">
<div class="col-md-3">
  <!-- Profile Image -->
  <div class="card card-purple card-outline">
    <div class="card-body box-profile">
      <div class="text-center">
        <img class="profile-user-img img-fluid img-circle"
             src="/dist/image/default-user_profile.jpg"
             alt="User profile picture">
      </div>

      <h3 class="profile-username text-center">{{ member.name }} (#{{ member.tag }}) </h3>

      {% if user.isJoueur %}
      <p class="text-muted text-center">{{ member.perm }}</p>
      {% endif %}

      <ul class="list-group list-group-unbordered mb-3">
        {% if member.guild is not empty %}
        <li class="list-group-item">
          <b>Chez {{ member.guild }} depuis le</b>
          <a class="float-right">{{ member.start }}</a>
        </li>
        {% endif %}
        <li class="list-group-item">
          <b>Niveau maximum des héros</b>
          {% if isProfile and igSetting.upgradeLevelList is not empty %}
              <a class="float-right" data-target="#automaticLevelUpgrade" data-toggle="modal" >
            <i class="fas fa-arrow-up"></i>
          </a>
          {% endif %}
          <a class="float-right padding-right-2"
          {% if isProfile and igSetting.upgradeLevelList is not empty %}
              style="padding-right: 5px"
          {% endif %}
          >
            {{ igSetting.maxLevel }}
          </a>
        </li>
        <!--
        <li class="list-group-item">
          <b>Following</b> <a class="float-right">543</a>
        </li>
        <li class="list-group-item">
          <b>Friends</b> <a class="float-right">13,287</a>
        </li>
        -->
      </ul>
    </div>
    <!-- /.card-body -->
  </div>
  <!-- /.card -->
</div>
  
<div class="col-md-9">
  <div class="card">
    <div class="card-header p-2">
      <ul class="nav nav-pills">
        <li class="nav-item"><a class="nav-link {{ _self.active_tab('heros', activeTab) }}" href="#heros" data-toggle="tab">Liste Héros</a></li>
        <li class="nav-item"><a class="nav-link {{ _self.active_tab('stats', activeTab)  }}" href="#stats" data-toggle="tab">Statistiques</a></li>
        {% if isProfile %}
        <li class="nav-item"><a class="nav-link {{ _self.active_tab('settings', activeTab) }}" href="#settings" data-toggle="tab">Paramètres</a></li>
        <li class="nav-item"><a class="nav-link {{ _self.active_tab('notifs', activeTab) }}" href="#notifs" data-toggle="tab">Notifs</a></li>
        {% endif %}
    </ul>
    </div><!-- /.card-header -->
    <div class="card-body">
      <div class="tab-content">
        <div class="tab-pane {{ _self.active_tab('heros', activeTab) }}" id="heros">
            <table id="herosList" class="table table-bordered table-hover">
            <thead>
                <tr>
                <th></th><!-- for primary sort only -->
                <th>Grade</th>
                <th>Elément</th>
                <th>Nom</th>
                <th>Evol</th>
                <th>Level</th>
                <th>Arme</th>
                <th>low break</th>
                </tr>
            </thead>
            <tbody>
                {% for characId, info in heros|filter(i => i.isPull) %}
                <tr style="background-color: {{ info.charac.color.background }}">
                    <td>{{ info.charac.grade.value }}</td>
                    <td>{{ info.charac.grade.name }}</td>
                    <td>{{ info.charac.element }}</td>
                    <td>
                        <img src="/dist/image/heros/{{ characId }}_icon.png"
                            class="img-fluid img-thumbnail"
                            width="50" height="50"
                            style="border: 2px solid {{ info.charac.color.frame }}; padding: 0; background-color: #a56e957a"
                            alt="{{ info.charac.name }}">
                        {{ info.charac.name }}
                    </td>
                    <td>{{ info.charac.stars }}</td>
                    <td>{{ info.charac.level }}</td>
                    <td>{% if info.charac.hasWeapon %}
                            <img src="/dist/image/heros/{{ characId }}_weapon.png"
                                class="img-fluid img-thumbnail"
                                width="50" height="50"
                                style="background-color: #00000000; border: 0; box-shadow: 0 0 0"
                                alt="{{ info.charac.name }}> weapon">
                        {% endif %}
                    </td>
                    <td>{{ info.charac.hasWeapon ? info.charac.nbWeaponBreak : '' }}</td>
                </tr>
                {% endfor %}
            </tbody>
            </table>
        </div>
        <div class="tab-pane {{ _self.active_tab('stats', activeTab) }}" id="stats">
            <div class="card card-info">
              <div class="card-header">
                <h3 class="card-title">Répartition des attaques</h3>

                <div class="card-tools">
                  <button type="button" class="btn btn-tool" data-card-widget="collapse">
                    <i class="fas fa-minus"></i>
                  </button>
                  <button type="button" class="btn btn-tool" data-card-widget="remove">
                    <i class="fas fa-times"></i>
                  </button>
                </div>
              </div>
              <div class="card-body">
                <div class="chart">
                  <canvas id="statsRaidFightCount" style="min-height: 250px; height: 400px; max-width: 100%;"></canvas>
                </div>
              </div>
              <!-- /.card-body -->
            </div>
            <div class="card card-info">
              <div class="card-header">
                <h3 class="card-title">Répartition des attaques</h3>

                <div class="card-tools">
                  <button type="button" class="btn btn-tool" data-card-widget="collapse">
                    <i class="fas fa-minus"></i>
                  </button>
                  <button type="button" class="btn btn-tool" data-card-widget="remove">
                    <i class="fas fa-times"></i>
                  </button>
                </div>
              </div>
              <div class="card-body">
                <div class="chart">
                  <canvas id="statsRaidFightSum" style="min-height: 250px; height: 400px; max-width: 100%;"></canvas>
                </div>
              </div>
              <!-- /.card-body -->
            </div>
        </div>
        {% if isProfile %}
        <div class="tab-pane {{ _self.active_tab('settings', activeTab) }}" id="settings">
          <form class="form-horizontal" role="form" action="{{ url_for('profile-settings', { 'id': id }) }}" method="post">
            {% include 'csrf.twig' %}
            <input type="hidden"
                    name="idForm"
                    value="{{ member.id }}">
            <div class="form-group row">
              <label for="nameFormId" class="col-sm-2 col-form-label">Nom (In Game)</label>
              <div class="col-sm-10">
                <input type="text"
                        class="form-control"
                        id="nameFormId"
                        value="{{ member.name }}"
                        disabled>
              </div>
            </div>
            <div class="form-group row">
              <label for="tagFormId" class="col-sm-2 col-form-label">Tag</label>
              <div class="col-sm-10">
                <input type="text"
                        class="form-control"
                        id="tagFormId"
                        value="{{ member.tag }}"
                        disabled>
              </div>
            </div>
            <div class="form-group row">
              <label for="loginFormId" class="col-sm-2 col-form-label">Login</label>
              <div class="col-sm-10">
                <input type="text"
                        class="form-control"
                        id="loginFormId"
                        name="loginForm"
                        value="{{ member.login }}">
              </div>
            </div>
            <div class="form-group row">
              <label for="oldPasswdFormId" class="col-sm-2 col-form-label">Mot de passe actuel</label>
              <div class="col-sm-10">
                <input type="password"
                        class="form-control"
                        id="oldPasswdFormId"
                        name="oldPasswdForm">
              </div>
            </div>
            <div class="form-group row">
              <label for="newPasswdFormId" class="col-sm-2 col-form-label">Nouveau mot de passe<br>(si besoin de changer)</label>
              <div class="col-sm-10">
                <input type="password"
                        class="form-control"
                        id="newPasswdFormId"
                        name="newPasswdForm">
              </div>
            </div>
            <div class="form-group row">
              <div class="offset-sm-2 col-sm-10">
                <button type="submit" class="btn btn-primary" name="updateMemberForm">Sauvegarder</button>
              </div>
            </div>
          </form>
        </div>
        <div class="tab-pane {{ _self.active_tab('notifs', activeTab) }}" id="notifs">
          Notifications
        </div>
        {% endif %}

      </div>
      <!-- /.tab-content -->
    </div><!-- /.card-body -->
  </div>
  <!-- /.card -->
</div>
<!-- /.col -->
</div>
<!-- /.row -->

{% endblock %}
    
{% block modal %}
<div class="modal fade" id="automaticLevelUpgrade">
  <div class="modal-dialog modal-sm">
    <div class="modal-content bg-default">
        <div class="modal-header bg-info">
          <h4 class="modal-title">Limite de niveau</h4>
        </div>
        <form class="form" role="form" action="{{ url_for('profile-heroes', { 'id': id }) }}" method="post">
          {% include 'csrf.twig' %}
          <div class="modal-body">
              <input type="hidden" name="memberIdForm" value="{{ id }}"/>
              <div class="form-group text-center">
                  <label for="levelFormId_autoLevel">Nouveau niv. max : </label>
                  <select name="levelForm" id="levelFormId_autoLevel">
                    {% for levelInfo in igSetting.upgradeLevelList %}
                        <option value="{{ levelInfo.level }}">
                            {{ levelInfo.level }}
                        </option>
                    {% endfor %}
                  </select>                    
              </div>
              <div class="form-group">
                Choisissez les héros qui ont ce nouveau niveau max :
              </div>
              {% for info in heros|filter(i => i.isPull)|sort((a, b) => a.charac.level <=> b.charac.level)|reverse %}
                <div class="form-group">
                  <label for="levelUpgradeId-{{ info.charac.id }}">
                        <img src="/dist/image/heros/{{ info.charac.id }}_icon.png"
                            class="img-fluid img-thumbnail"
                            width="50" height="50"
                            style="border: 2px solid {{ info.charac.color.frame }}; padding: 0; background-color: #a56e957a"
                            alt="{{ info.charac.name }}">
                    {{ info.charac.name }}
                  </label>
                  <input type="checkbox" id="levelUpgradeId-{{ info.charac.id }}" name="characId-{{ info.charac.id }}">
                </div>
              {% endfor %}
          </div>
          <div class="modal-footer justify-content-between bg-secondary">
            <button type="button" class="btn btn-outline-light" data-dismiss="modal">Close</button>
            <button type="submit" class="btn btn-outline-light" name="automaticLevelUpgradeForm">Sauvegarder</button>
          </div>
        </form>
    </div>
    <!-- /.modal-contençàt -->
  </div>
  <!-- /.modal-dialog -->
</div>

<div class="modal fade" id="maxLevelModel">
  <div class="modal-dialog">
    <div class="modal-content bg-default text-center">
        <div class="modal-header bg-info">
          <h4 class="modal-title">Limite de niveau</h4>
        </div>
        <form class="form" role="form" action="{{ url_for('my-profile') }}" method="post">
          {% include 'csrf.twig' %}
          <div class="modal-body">
              <input type="hidden" name="settingIdForm" value="{{ igSetting.id }}"/>
              <input type="hidden" name="memberIdForm" value="{{ igSetting.memberId }}"/>
              <div class="form-group">
                  <label for="levelFormId_maxLevel">Niv: </label>
                  <select name="levelForm" id="levelFormId_maxLevel">
                    {% for mondeId, levelInfo in igSetting.maxLevelList %}
                        <option {{ levelInfo.level == igSetting.maxLevel ? 'selected' : '' }} 
                                {{ levelInfo.disabled ? 'disabled' : '' }}
                                value="{{ levelInfo.level }}">
                            {{ levelInfo.level }} (monde {{ mondeId }})
                        </option>
                    {% endfor %}
                  </select>
              </div>
          </div>
          <div class="modal-footer justify-content-between bg-secondary">
            <button type="button" class="btn btn-outline-light" data-dismiss="modal">Close</button>
            <button type="submit" class="btn btn-outline-light" name="updateIgSettingForm">Sauvegarder</button>
          </div>
        </form>
    </div>
    <!-- /.modal-content -->
  </div>
  <!-- /.modal-dialog -->
</div>
{% endblock %} 
    
{% block scripts %}

<!-- DataTables  & Plugins -->
<script src="/dist/AdminLTE-3.1.0/plugins/datatables/jquery.dataTables.min.js"></script>
<script src="/dist/AdminLTE-3.1.0/plugins/datatables-bs4/js/dataTables.bootstrap4.min.js"></script>
<script src="/dist/AdminLTE-3.1.0/plugins/datatables-responsive/js/dataTables.responsive.min.js"></script>
<script src="/dist/AdminLTE-3.1.0/plugins/datatables-responsive/js/responsive.bootstrap4.min.js"></script>
<script src="/dist/AdminLTE-3.1.0/plugins/datatables-buttons/js/dataTables.buttons.min.js"></script>
<script src="/dist/AdminLTE-3.1.0/plugins/datatables-buttons/js/buttons.bootstrap4.min.js"></script>
<script src="/dist/AdminLTE-3.1.0/plugins/jszip/jszip.min.js"></script>
<script src="/dist/AdminLTE-3.1.0/plugins/pdfmake/pdfmake.min.js"></script>
<script src="/dist/AdminLTE-3.1.0/plugins/pdfmake/vfs_fonts.js"></script>
<script src="/dist/AdminLTE-3.1.0/plugins/datatables-buttons/js/buttons.html5.min.js"></script>
<script src="/dist/AdminLTE-3.1.0/plugins/datatables-buttons/js/buttons.print.min.js"></script>
<script src="/dist/AdminLTE-3.1.0/plugins/datatables-buttons/js/buttons.colVis.min.js"></script>
<script src="/dist/AdminLTE-3.1.0/plugins/chart.js/Chart.min.js"></script>
<script src="/dist/js/patternomaly.min.js"></script>
<script type="text/javascript">
$(document).ready(function(){
  $('.dataTables_length').addClass('bs-select');;
});
$(function () {
  var jsMemberId = {{ member.id }};

  $.fn.dataTable.Buttons.defaults.dom.button.className = 'btn';
  $("#herosList").DataTable({
    "responsive": true,
    "lengthChange": true, pageLength: 50, lengthMenu: [[10, 25, 50, -1], [10, 25, 50, "All"]],
    "autoWidth": false,
    "searching": true,
    "scrollCollapse": true, "scrollY": "500px",
    "paging": true,// "paging": true, "pagingType": "simple",
    "order": [[ 0, "desc" ]],
    "columnDefs": [
            {
                "targets": [ 0 ],
                "visible": false,
                "searchable": false,
                orderData: [ 0, 4, 5, 7 ]
            }
        ],
    "buttons": [
        {
            text: 'Feu',
            className: 'btn-info', 
            action: function ( e, dt, node, config ) {
            }
        },
        {
            text: 'Eau',
            className: 'btn-info', 
            action: function ( e, dt, node, config ) {
            }
        },
        {
            text: 'Ter',
            className: 'btn-info', 
            action: function ( e, dt, node, config ) {
            }
        },
        {
            text: 'Lum',
            className: 'btn-info', 
            action: function ( e, dt, node, config ) {
            }
        },
        {
            text: 'Ten',
            className: 'btn-info', 
            action: function ( e, dt, node, config ) {
            }
        },
        {
            text: 'Bas',
            className: 'btn-info', 
            action: function ( e, dt, node, config ) {
            }
        },
        {% if isProfile %}
        ,{
              text: 'modifier Héros',
              className: 'btn-link btn-outline-primary',
              action: function ( e, dt, node, config ) {
                  location.href = '{{ url_for('member-crew-edit', { id: member.id }) }}';
              }
          }
        ,{
              text: 'Update niv. max',
              className: 'btn-primary',
              action: function ( e, dt, node, config ) {
                  $('#maxLevelModel').modal('show');
              }
          }
        {% endif %}
    ]

  }).buttons().container().appendTo('#herosList_wrapper .col-md-6:eq(0)');

  var stackedBarChartCanvas = $('#statsRaidFightCount').get(0).getContext('2d');
    var areaChartData = {
      labels  : [
        {% for raidId, raid in raidInfo %}
          {{ loop.last ? raidId : raidId~", " }}
        {% endfor %}
      ],
      datasets: [
      {% for eId, name in elements %}
        {
          label               : '{{ name }}',
          backgroundColor     : '{{ colors[eId] }}',
          borderColor         : '#ffc107',
          borderWidth         : {left: 2, right: 2},
          data                : [
            {% for count in stat1[eId] %}
              {{ loop.last ? count : count~", " }}
            {% endfor %}
            ]
        },
      {% endfor %}
        {
          label               : 'défaut',
          backgroundColor     : pattern.draw('diagonal-right-left', 'rgb(255, 193, 07, 0.4)'),
          borderColor         : '#ffc107',
          borderWidth         : {bottom: 2},
          borderSkipped       : false,
          minBarLength        : 2,
          data                : [
            {% for count in stat1[0] %}
              {{ loop.last ? count : count~", " }}
            {% endfor %}
            ]
        }
      ]
    };
  var stackedBarChartData = $.extend(true, {}, areaChartData);
  var stackedBarChartOptions = {
    responsive              : true,
    maintainAspectRatio     : false,
    scales: {
      xAxes: [{
        stacked: true,
      }],
      yAxes: [{
        stacked: true
      }]
    }
  };
  new Chart(stackedBarChartCanvas, {
    type: 'bar',
    data: stackedBarChartData,
    options: stackedBarChartOptions
  });
  
  var stackedBarChartCanvas = $('#statsRaidFightSum').get(0).getContext('2d');
    var areaChartData = {
      labels  : [
        {% for raidId, raid in raidInfo %}
          {{ loop.last ? raidId : raidId~", " }}
        {% endfor %}
      ],
      datasets: [
      {% for eId, name in elements %}
        {
          label               : '{{ name }}',
          backgroundColor     : '{{ colors[eId] }}',
          borderColor         : '#ffc107',
          borderWidth         : {left: 2, right: 2},
          data                : [
            {% for sum in stat2[eId] %}
              {{ loop.last ? sum : sum~", " }}
            {% endfor %}
            ]
        },
      {% endfor %}
        {
          label               : 'défaut',
          backgroundColor     : pattern.draw('diagonal-right-left', 'rgb(255, 193, 07, 0.4)'),
          borderColor         : '#ffc107',
          borderWidth         : {bottom: 2},
          borderSkipped       : false,
          minBarLength        : 2,
          data                : [
            {% for sum in stat2[0] %}
              {{ loop.last ? sum : sum~", " }}
            {% endfor %}
            ]
        }
      ]
    };
  var stackedBarChartData = $.extend(true, {}, areaChartData);
  var stackedBarChartOptions = {
    responsive              : true,
    maintainAspectRatio     : false,
    scales: {
      xAxes: [{
        stacked: true,
      }],
      yAxes: [{
        stacked: true
      }]
    }
  };
  new Chart(stackedBarChartCanvas, {
    type: 'bar',
    data: stackedBarChartData,
    options: stackedBarChartOptions
  });
});
</script>
{% endblock %}

{% block styles %}
  <link rel="stylesheet" href="/dist/AdminLTE-3.1.0/plugins/datatables-bs4/css/dataTables.bootstrap4.min.css">
  <link rel="stylesheet" href="/dist/AdminLTE-3.1.0/plugins/datatables-responsive/css/responsive.bootstrap4.min.css">
  <link rel="stylesheet" href="/dist/AdminLTE-3.1.0/plugins/datatables-buttons/css/buttons.bootstrap4.min.css">
{% endblock %}